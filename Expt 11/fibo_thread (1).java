/*Write a multithreaded program that generates the Fibonacci sequence. This program should work as follows: create a class Input that reads the number of Fibonacci numbers that the program is to generate. The class will then create a separate thread that will generate the Fibonacci numbers, placing the sequence in an array. When the thread finishes execution, the parent thread (Input class) will output the sequence generated by the child thread. Because the parent thread cannot begin outputting the Fibonacci sequence until the child thread finishes, the parent thread will have to wait for the child thread to finish.*/


import java.util.*;
class input
{
	static int i,n,a[];
	public static void main(String ar[])
	{

		Scanner sc=new Scanner(System.in);
		System.out.println("Enter n:");
		n=sc.nextInt();
		a=new int[n];

		Fibo e=new Fibo();
		
		Thread t=new Thread(e);
		
		
		t.start();

		System.out.println("thread fibo initial status:"+t.isAlive());
		while(t.isAlive())
			Thread.yield();		//or Thread.sleep(100)

		System.out.println("Fibonacci series is:");
		for(i=0;i<n;i++)
			System.out.println(a[i]);

		System.out.println("thread fibo final status:"+t.isAlive());
	}
}

class Fibo extends input implements Runnable
{
	public void run()
	{
		a[0]=0; a[1]=1;
		for (i=2;i<n;i++)
			a[i]=a[i-1]+a[i-2];
	}
}